import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToOne, JoinColumn, CreateDateColumn, UpdateDateColumn, Index } from 'typeorm';
import { User } from '../../users/entities/user.entity';
import { Book } from './book.entity';
import { QueueEntry } from './queue-entry.entity';
import { BookLoan } from './book-loan.entity';

export enum BookRequestStatus {
  PENDING = 'PENDING',
  QUEUED = 'QUEUED',
  APPROVED = 'APPROVED',
  REJECTED = 'REJECTED',
  CANCELLED = 'CANCELLED',
  FULFILLED = 'FULFILLED',
}

@Entity('book_requests')
@Index(['status', 'createdAt']) // For filtering pending requests
@Index(['userId', 'status']) // For user's requests
@Index(['bookId', 'status']) // For book-specific requests
export class BookRequest {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ type: 'uuid' })
  userId: string;

  @Column({ type: 'uuid' })
  bookId: string;

  @Column({
    type: 'enum',
    enum: BookRequestStatus,
    default: BookRequestStatus.PENDING,
  })
  status: BookRequestStatus;

  @Column({ type: 'text', nullable: true })
  reason: string | null;

  @Column({ type: 'timestamp', nullable: true })
  approvedAt: Date | null;

  @Column({ type: 'timestamp', nullable: true })
  rejectedAt: Date | null;

  @Column({ type: 'timestamp', nullable: true })
  fulfilledAt: Date | null;

  @Column({ type: 'text', nullable: true })
  rejectionReason: string | null;

  @Column({ type: 'boolean', default: false })
  autoGenerated: boolean;

  @Column({ type: 'uuid', nullable: true })
  queueEntryId: string | null;

  @Column({ type: 'uuid', nullable: true })
  approvedById: string | null;

  @Column({ type: 'uuid', nullable: true })
  rejectedById: string | null;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @ManyToOne(() => User, user => user.bookRequests)
  @JoinColumn({ name: 'userId' })
  user: User;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'approvedById' })
  approvedBy: User | null;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'rejectedById' })
  rejectedBy: User | null;

  @ManyToOne(() => Book, book => book.requests)
  @JoinColumn({ name: 'bookId' })
  book: Book;

  // When a request is approved, it creates a queue entry
  @OneToOne(() => QueueEntry, queueEntry => queueEntry.bookRequest, {
    cascade: true,
    onDelete: 'CASCADE',
    nullable: true
  })
  @JoinColumn({ name: 'queueEntryId' })
  queueEntry: QueueEntry | null;

  @OneToOne(() => BookLoan, loan => loan.request, {
    cascade: true,
    onDelete: 'SET NULL',
    nullable: true
  })
  loan: BookLoan | null;

  @Column({ type: 'uuid', nullable: true })
  loanId: string | null;
}
